// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zckwriebmvcyvrmznsgf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpja3dyaWVibXZjeXZybXpuc2dmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyNjYzOTIsImV4cCI6MjA2Mjg0MjM5Mn0.SDzW3_X1c6Aoi84ROaAmnuhmZb-qWjCghPJn7PfxbKA";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Cache storage for API requests
 */
const cache: { [key: string]: { data: any; expiry: number } } = {};

/**
 * Fetches data using the provided function and caches the result
 * @param cacheKey Unique key for caching
 * @param fetchFunction Function that returns a promise with data
 * @param cacheDurationMinutes How long to cache the result in minutes
 * @returns The fetched or cached data
 */
export const fetchWithCache = async <T>(
  cacheKey: string,
  fetchFunction: () => Promise<T>,
  cacheDurationMinutes: number = 5
): Promise<T> => {
  const now = Date.now();
  
  // Check if we have valid cached data
  if (cache[cacheKey] && cache[cacheKey].expiry > now) {
    console.log(`[Cache] Using cached data for ${cacheKey}`);
    return cache[cacheKey].data;
  }
  
  // Otherwise fetch fresh data
  try {
    console.log(`[Cache] Fetching fresh data for ${cacheKey}`);
    const data = await fetchFunction();
    
    // Cache the result
    cache[cacheKey] = {
      data,
      expiry: now + (cacheDurationMinutes * 60 * 1000)
    };
    
    return data;
  } catch (error) {
    console.error(`[Cache] Error fetching data for ${cacheKey}:`, error);
    throw error;
  }
};
